# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

before_all do
#     ENV['ITMSTRANSPORTER_FORCE_ITMS_PACKAGE_UPLOAD'] = 'true'
  ENV['ITMSTRANSPORTER_FORCE_ITMS_PACKAGE_UPLOAD'] = 'true' if ENV['FL_XCODE_VERSION'] && ENV['FL_XCODE_VERSION'].include?(' 13.')
end

default_platform(:ios)

platform :ios do
    desc 'Push a new staging build to TestFlight'

    lane :staging do
        FLAVOR = Base64.encode64('FLAVOR=staging')
        APP_NAME = 'GetX boilerplate'
        APP_IDENTIFIER = 'com.quangnd.getxboilerplate.staging';
        ISSUE_ID = '502750fb-fa16-4dad-89de-a7aa6f124d17';
        KEY_ID = '57QSSWHQ44'
        create_keychain(
            name: APP_NAME,
            default_keychain: true,
            password: APP_NAME,
            unlock: true,
        )
        api_key = app_store_connect_api_key(
            key_id: KEY_ID,
            key_content: ENV['WATCHKEY_APP_SECRET'],
            issuer_id: ISSUE_ID,
        )
        import_certificate(
            certificate_path: ENV['SIGNING_KEY_FILE_PATH'],
            keychain_password: APP_NAME,
            keychain_name: APP_NAME,
        )
        profile = get_provisioning_profile(
            api_key: api_key,
            app_identifier: APP_IDENTIFIER,
        )
        update_project_provisioning(
            profile: profile['SIGH_PROFILE_PATH']
        )
        version = latest_testflight_build_number(
            api_key: api_key,
            app_identifier: APP_IDENTIFIER,
        )
        increment_build_number(
            build_number: version + 1,
            xcodeproj: 'Runner.xcodeproj',
        )
        sh('flutter build ipa --dart-define FLAVOR=staging') rescue nil
        build_app(
            workspace: 'Runner.xcworkspace',
            scheme: 'Runner',
            output_name: APP_NAME,
            skip_build_archive: true,
            archive_path: '../build/ios/archive/Runner.xcarchive',
        )
        upload_symbols_to_crashlytics(
            dsym_path: './GetX boilerplate.app.dSYM.zip',
            gsp_path: './GoogleService-Info.plist'
        )
        pilot(
            ipa: "#{APP_NAME}.ipa",
            skip_submission: true,
            skip_waiting_for_build_processing: true,
            api_key: api_key,
        )
    end
end

